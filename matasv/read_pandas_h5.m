function data = read_pandas_h5(filename)
%% A function to read HDF5 files generated by pandas
%
% Val Schmidt
% CCOM/JHC
% 2018

if isempty(filename)
   filename = uigetfile('.');
end

% Get file metadata
M = h5info(filename);

% FIX: Check for this...
filetype = 'table';

% Extract the DataFrame names
% Each DataFrame in the h5 file will be encoded as a "Group"
Groups = {M.Groups.Name};

name = Groups{1}(2:end);
data.name = replace(name,'/','_');

if strcmp(filetype,'fixed')

    %% to_hdf(....forat='fixed')
    % If data is written in the 'fixed' format, then text portions of the
    % DataFrame will be written as python objects which appear as binary blobs
    % within the hdf file. These are uninterpretable by MATLAB (at least not
    % without considerable pain) and will be omitted from reading.
    
    % Extract the field names for each column in the data set.
    % fieldnamelist = h5read(filename,[Groups{1} '/block0_items']);
    
    % Read the data (transpose it as its written in rows)
    % values = h5read(filename,[Groups{1} '/block0_values'])';

end

if strcmp(filetype,'table')
%% to_hdf(....format='table')
% For format='table' generated files from pandas (pytables format), text
% data is written, (and can be read by MATLAB) as a character array. This
% line reads all the data. 
values = h5read(filename,[Groups{1} '/table']);


GroupDataSetsAttributesNames = {M.Groups.Datasets.Attributes.Name};
GroupDataSetsAttributesValues = {M.Groups.Datasets.Attributes.Value};

STRINGDATA = false;
for i=1:length(GroupDataSetsAttributesNames)
        
    % Search for the attributes that have the field names for each column
    % in the data block      
    if regexp(GroupDataSetsAttributesNames{i},'values_block_\d+_kind')
        
        if regexp(GroupDataSetsAttributesValues{i+2},'^string')
            STRINGDATA = true;
        else
            STRINGDATA = false;
        end
        
        % Extract the field names for the block from the pythonic text.
        blockfieldnames = extract_text_from_python(GroupDataSetsAttributesValues(i));

        % Allocate columns to named fields in the output data structure. 
        for q=1:length(blockfieldnames)
            BlockGroupName = GroupDataSetsAttributesNames{i}(1:end-5);
            % Handle strings differently since they come in a 3D matrix of
            % chars.
            if STRINGDATA
                % Handle when there is more than one column of strings
                % which produces a 3D matrix of characters.
                if ndims(values.(BlockGroupName)) == 2
                    data.(blockfieldnames{q}) = values.(BlockGroupName)';                
                elseif ndims(values.(BlockGroupName)) == 3
                    data.(blockfieldnames{q}) = squeeze(values.(BlockGroupName)(:,q,:))';
                end
            else
                data.(blockfieldnames{q}) = values.(BlockGroupName)(q,:)';
            end
        end
    end
    
    
    
end


end
% Set the field names
% for i=1:Nfields
%     % Modify field names to comply with MATLAB variable naming syntax.
%     fieldname = fieldnamelist{i};
%     fieldname = strrep(fieldname,'(','_');
%     fieldname = strrep(fieldname,')','');
%     fieldname = strrep(fieldname,'%','Pct');
%     fieldname = strrep(fieldname,'|','');
%     fieldname = strrep(fieldname,'-','_');
%     fieldname = strrep(fieldname,'/','_');
%     fieldname = strrep(fieldname,'\','_');
%     if strcmp(fieldname(1),'1')
%         fieldname = ['One' fieldname(2:end)];
%     end
%     % Catch anything else...
%     fieldname = regexprep(fieldname,'\W+','');
%     % Set the field names
%     data.(fieldname) = values(:,i);
% end

end


function output = extract_text_from_python(input)

% Remove single quotes which confound me, and add a unique delimiter.
tmp = strrep(input,'''','%%%');
% Remove all other odd characters, but keep the delimiter.
tmp = regexprep(tmp,'[^a-zA-Z_0-9%]+','');
% Split on delimiter.
tmp2 = regexp(tmp,'%%%(\w+)%%%','tokens');
% Pull results out of embedded cell.
for i=1:length(tmp2{1})
    output{i} = tmp2{1}{i}{1};
end

end